{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Market Making RL (MMRL)","text":"<p>Welcome to the MMRL docs. This site covers:</p> <ul> <li>Quickstart and install</li> <li>Architecture and components</li> <li>CLI and API usage</li> <li>Experiments and analysis</li> <li>Configuration schema</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<pre><code>pip install -r requirements.txt\nmmrl backtest\nmmrl evaluate\n</code></pre>"},{"location":"#demo","title":"Demo","text":""},{"location":"#benchmarks","title":"Benchmarks","text":""},{"location":"#cli","title":"CLI","text":"<pre><code>mmrl --help\nmmrl config-validate\nmmrl config-schema\nmmrl fetch-data --exchange binance --symbol BTC/USDT --limit 1000 --out data/btc.parquet\n</code></pre>"},{"location":"#api","title":"API","text":"<pre><code>docker compose up -d redis worker api mlflow\ncurl http://localhost:8000/health\ncurl http://localhost:8000/config/schema\n</code></pre> <p>See also: performance_metrics.md</p>"},{"location":"cli/","title":"CLI","text":""},{"location":"cli/#commands","title":"Commands","text":"<ul> <li><code>mmrl backtest [--config path]</code></li> <li><code>mmrl evaluate [--config path]</code></li> <li><code>mmrl grid [--config path]</code></li> <li><code>mmrl analyze &lt;returns.csv&gt; [--plot] [--output-file out.csv]</code></li> <li><code>mmrl report &lt;run_dir|csv&gt; [--out report.html]</code></li> <li><code>mmrl fetch-data --exchange binance --symbol BTC/USDT --limit 1000 --out data/btc.parquet [--since ts_ms] [--max-pages N]</code></li> <li><code>mmrl config-validate</code></li> <li><code>mmrl config-schema</code></li> </ul>"},{"location":"cli/#tips","title":"Tips","text":"<ul> <li>If <code>configs/inventory.yaml</code> does not exist, <code>mmrl backtest</code> auto-generates a default config.</li> <li>Use <code>mmrl report</code> to produce a single HTML you can share.</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>The main YAML file controls environment, execution, fees, and agent.</p>"},{"location":"configuration/#keys","title":"Keys","text":"<ul> <li><code>run_tag</code> (str): MLflow experiment/run tag</li> <li><code>seed</code> (int): global seed for determinism</li> <li><code>steps</code> (int): number of timesteps</li> <li><code>output_dir</code> (str): directory for results</li> <li><code>market</code>:</li> <li><code>ou_enabled</code> (bool)</li> <li><code>ou</code>: <code>mu</code>, <code>kappa</code>, <code>sigma</code>, <code>dt</code></li> <li><code>vol_regime</code>: <code>enabled</code>, <code>high_sigma_scale</code>, <code>switch_prob</code></li> <li><code>correlation</code> (optional): NxN matrix (multi-asset)</li> <li><code>execution</code>: <code>base_arrival_rate</code>, <code>alpha</code>, <code>size_sensitivity</code></li> <li><code>fees</code>: <code>fee_bps</code>, <code>slippage_bps</code>, <code>maker_bps</code>, <code>taker_bps</code></li> <li><code>agent</code>: <code>spread</code>, <code>inventory_sensitivity</code></li> <li><code>multi_asset</code> (optional): <code>num_assets</code>, <code>depth_levels</code>, <code>level_widen</code>, <code>base_size</code>, <code>regime_skew</code></li> <li><code>grid</code> (optional): sweep values for grid search</li> </ul>"},{"location":"configuration/#validate-schema","title":"Validate / Schema","text":"<pre><code>mmrl config-validate\nmmrl config-schema\n</code></pre>"},{"location":"data/","title":"Data","text":""},{"location":"data/#ccxt-fetch","title":"CCXT Fetch","text":"<p>Fetch exchange trades to Parquet:</p> <pre><code>mmrl fetch-data --exchange binance --symbol BTC/USDT --limit 1000 --out data/btc.parquet --since 1700000000000 --max-pages 20\n</code></pre>"},{"location":"data/#replay","title":"Replay","text":"<p>Use <code>adapters/market_replay.py</code> and <code>examples/replay_quickstart.py</code> to iterate through recorded data and map to env-compatible ticks.</p>"},{"location":"data/#pluggable-data-adapters","title":"Pluggable data adapters","text":"<p>Provide your own data source by implementing a minimal adapter and loading it dynamically.</p>"},{"location":"data/#base-interface","title":"Base interface","text":"<pre><code>from mmrl.data.base import DataAdapter\n\nclass MyAdapter(DataAdapter):\n    def iter_ticks(self):\n        # yield dicts with keys your env expects (e.g. time, mid_price, best_bid, best_ask, volume)\n        yield {\"time\": 1, \"mid_price\": 100.0}\n</code></pre>"},{"location":"data/#dynamic-loading","title":"Dynamic loading","text":"<pre><code>from mmrl.data import load_adapter\nadapter = load_adapter('mmrl.data.csv_adapter:CSVAdapter', path='data/file.csv', mapping={'mid_price': 'mid'})\nfor tick in adapter.iter_ticks():\n    pass\n</code></pre>"},{"location":"data/#streaming-into-the-env","title":"Streaming into the env","text":"<p>You can feed ticks into the env to progress reference state:</p> <pre><code>from env.simple_lob_env import SimpleLOBEnv\nfrom mmrl.data import load_adapter\n\nenv = SimpleLOBEnv()\nadapter = load_adapter('mmrl.data.csv_adapter:CSVAdapter', path='data/file.csv', mapping={'mid_price': 'mid'})\nfor tick in adapter.iter_ticks():\n    state = env.step_from_tick(tick)\n</code></pre>"},{"location":"data/#storage","title":"Storage","text":"<ul> <li>DuckDB stores <code>runs</code>, <code>metrics</code>, <code>trades</code> for local analysis.</li> <li>Artifacts (CSV/plots/metrics.json) in <code>results/&lt;timestamp_tag&gt;/</code>.</li> </ul>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#api-workers-mlflow","title":"API + Workers + MLflow","text":"<pre><code>docker compose up -d redis worker api mlflow\n</code></pre>"},{"location":"deployment/#docs","title":"Docs","text":"<pre><code>mkdocs gh-deploy --force\n</code></pre>"},{"location":"deployment/#docker-images-optional","title":"Docker images (optional)","text":"<ul> <li>You can build and publish CLI/API images and reference in docker-compose.yml for portability.</li> </ul>"},{"location":"extending/","title":"Extending","text":""},{"location":"extending/#add-a-new-agent","title":"Add a new agent","text":"<p>Create a class with a <code>quote(mid_price: float, inventory: int) -&gt; (bid, ask)</code> method and wire it into <code>experiments/evaluate_agents.py</code>.</p>"},{"location":"extending/#customize-microstructure","title":"Customize microstructure","text":"<p>Edit <code>env/simple_lob_env.py</code> (fills, fees, slippage, OU/regimes). For multi-asset/regime-conditioned depth, see <code>env/multi_asset_env.py</code>.</p>"},{"location":"extending/#programmatic-hooks","title":"Programmatic hooks","text":"<p>Use <code>mmrl.run_backtest(config)</code> in your own scripts. Persist your own artifacts to the run directory.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#install","title":"Install","text":"<ul> <li>Backtest + storage:</li> </ul> <pre><code>pip install \"mmrl[api]\"\n</code></pre> <ul> <li>RL extras (PPO, Gym/SB3):</li> </ul> <pre><code>pip install \"mmrl[api]\" \"mmrl[rl]\"\n</code></pre>"},{"location":"getting_started/#quickstart-cli","title":"Quickstart (CLI)","text":"<pre><code>mmrl backtest\nmmrl report results/&lt;latest_run_dir&gt; --out report.html\n</code></pre>"},{"location":"getting_started/#quickstart-python","title":"Quickstart (Python)","text":"<pre><code>from mmrl import run_backtest\ncfg = {\"run_tag\": \"demo\", \"seed\": 42, \"steps\": 500, \"output_dir\": \"results\",\n        \"agent\": {\"spread\": 0.1, \"inventory_sensitivity\": 0.05},\n        \"market\": {\"ou_enabled\": True, \"ou\": {\"mu\": 100, \"kappa\": 0.05, \"sigma\": 0.5, \"dt\": 1.0},\n                    \"vol_regime\": {\"enabled\": True, \"high_sigma_scale\": 3.0, \"switch_prob\": 0.02}},\n        \"execution\": {\"base_arrival_rate\": 1.0, \"alpha\": 1.5},\n        \"fees\": {\"fee_bps\": 1.0, \"slippage_bps\": 2.0, \"maker_bps\": -0.5, \"taker_bps\": 1.0}}\nrun_dir, metrics = run_backtest(cfg)\nprint(run_dir, metrics)\n</code></pre>"},{"location":"http_api/","title":"HTTP API","text":"<p>Start services:</p> <pre><code>docker compose up -d redis worker api mlflow\n</code></pre>"},{"location":"http_api/#endpoints","title":"Endpoints","text":"<ul> <li>Health: <code>GET /health</code></li> <li>Backtest: <code>POST /backtest</code> body: <code>{ \"steps\": 1000 }</code></li> <li>Grid: <code>POST /grid</code></li> <li>Train: <code>POST /train</code></li> <li>Evaluate: <code>POST /evaluate</code></li> <li>Evaluate Multi: <code>POST /evaluate_multi</code> (sync=false by default)</li> <li>Jobs: <code>GET /jobs</code>, <code>GET /jobs/{id}</code></li> <li>Runs: <code>GET /runs?limit=&amp;offset=</code>, <code>GET /runs/{run}</code>, <code>GET /runs/{run}/artifacts</code>, <code>GET /runs/{run}/download</code></li> <li>Trades: <code>GET /trades/{run_id}</code></li> <li>Metrics: <code>GET /metrics/{run_id}</code></li> <li>Config schema: <code>GET /config/schema</code></li> </ul>"},{"location":"http_api/#examples","title":"Examples","text":"<pre><code>curl -X POST http://localhost:8000/backtest -H 'Content-Type: application/json' -d '{\"steps\": 500}'\ncurl http://localhost:8000/runs?limit=10\ncurl -L -o run.zip http://localhost:8000/runs/&lt;run_dir&gt;/download\n</code></pre>"},{"location":"performance_metrics/","title":"Performance Metrics Guide","text":"<p>This guide explains the comprehensive performance metrics available in MMRL for analyzing market making strategies.</p>"},{"location":"performance_metrics/#overview","title":"Overview","text":"<p>MMRL provides industry-standard performance metrics that traders, researchers, and risk managers use to evaluate trading strategies. These metrics help you understand:</p> <ul> <li>Return Performance: How much money your strategy makes</li> <li>Risk Metrics: How much risk your strategy takes</li> <li>Risk-Adjusted Returns: How efficiently your strategy generates returns relative to risk</li> <li>Trading Statistics: How often your strategy wins vs. loses</li> <li>Distribution Characteristics: The shape and behavior of your returns</li> </ul>"},{"location":"performance_metrics/#quick-start","title":"Quick Start","text":"<pre><code>from utils.metrics import calculate_all_metrics, print_metrics_summary\n\n# Calculate all metrics for your strategy returns\nmetrics = calculate_all_metrics(\n    returns=your_returns_array,\n    risk_free_rate=0.02,  # 2% annual risk-free rate\n    periods_per_year=252   # Daily data\n)\n\n# Print a formatted summary\nprint_metrics_summary(metrics)\n</code></pre>"},{"location":"performance_metrics/#core-metrics","title":"Core Metrics","text":""},{"location":"performance_metrics/#1-return-metrics","title":"1. Return Metrics","text":""},{"location":"performance_metrics/#total-return","title":"Total Return","text":"<ul> <li>What it is: The total percentage gain/loss over the entire period</li> <li>Formula: <code>(Final_Value / Initial_Value) - 1</code></li> <li>Interpretation: Simple measure of absolute performance</li> <li>Example: 15.5% means your strategy grew by 15.5% over the period</li> </ul>"},{"location":"performance_metrics/#annualized-return","title":"Annualized Return","text":"<ul> <li>What it is: The compound annual growth rate</li> <li>Formula: <code>(1 + Total_Return)^(Periods_Per_Year / Total_Periods) - 1</code></li> <li>Interpretation: Standardized return measure for comparison across different time periods</li> <li>Example: 12.3% means your strategy grows at 12.3% per year on average</li> </ul>"},{"location":"performance_metrics/#2-risk-metrics","title":"2. Risk Metrics","text":""},{"location":"performance_metrics/#volatility-standard-deviation","title":"Volatility (Standard Deviation)","text":"<ul> <li>What it is: Annualized standard deviation of returns</li> <li>Formula: <code>Std_Dev(Returns) \u00d7 \u221a(Periods_Per_Year)</code></li> <li>Interpretation: Higher volatility = more uncertainty and potential for large losses</li> <li>Example: 25% means returns typically vary by \u00b125% annually</li> </ul>"},{"location":"performance_metrics/#maximum-drawdown","title":"Maximum Drawdown","text":"<ul> <li>What it is: Largest peak-to-trough decline in portfolio value</li> <li>Formula: <code>(Current_Value - Peak_Value) / Peak_Value</code></li> <li>Interpretation: Measures the worst historical loss and recovery time needed</li> <li>Example: -18.5% means the strategy lost 18.5% from its peak at some point</li> </ul>"},{"location":"performance_metrics/#maximum-drawdown-duration","title":"Maximum Drawdown Duration","text":"<ul> <li>What it is: How long the strategy took to recover from maximum drawdown</li> <li>Interpretation: Longer duration = more time spent underwater</li> <li>Example: 45 periods means it took 45 periods to recover from the worst loss</li> </ul>"},{"location":"performance_metrics/#3-risk-adjusted-return-metrics","title":"3. Risk-Adjusted Return Metrics","text":""},{"location":"performance_metrics/#sharpe-ratio","title":"Sharpe Ratio","text":"<ul> <li>What it is: Excess return per unit of total risk</li> <li>Formula: <code>(Return - Risk_Free_Rate) / Volatility</code></li> <li>Interpretation: Higher is better; &gt;1 is good, &gt;2 is very good</li> <li>Example: 1.25 means you earn 1.25% excess return per 1% of volatility</li> </ul>"},{"location":"performance_metrics/#sortino-ratio","title":"Sortino Ratio","text":"<ul> <li>What it is: Excess return per unit of downside risk</li> <li>Formula: <code>(Return - Risk_Free_Rate) / Downside_Deviation</code></li> <li>Interpretation: Similar to Sharpe but only penalizes downside volatility</li> <li>Example: 1.8 means you earn 1.8% excess return per 1% of downside risk</li> </ul>"},{"location":"performance_metrics/#calmar-ratio","title":"Calmar Ratio","text":"<ul> <li>What it is: Annualized return divided by maximum drawdown</li> <li>Formula: <code>Annualized_Return / |Max_Drawdown|</code></li> <li>Interpretation: Higher is better; measures return relative to worst loss</li> <li>Example: 0.8 means annual return is 80% of the maximum drawdown</li> </ul>"},{"location":"performance_metrics/#4-trading-performance-metrics","title":"4. Trading Performance Metrics","text":""},{"location":"performance_metrics/#hit-rate-win-rate","title":"Hit Rate (Win Rate)","text":"<ul> <li>What it is: Percentage of periods with positive returns</li> <li>Formula: <code>Positive_Periods / Total_Periods</code></li> <li>Interpretation: Higher is generally better, but not always (depends on risk/reward)</li> <li>Example: 65% means the strategy wins in 65% of periods</li> </ul>"},{"location":"performance_metrics/#profit-factor","title":"Profit Factor","text":"<ul> <li>What it is: Ratio of gross profits to gross losses</li> <li>Formula: <code>Sum(Positive_Returns) / |Sum(Negative_Returns)|</code></li> <li>Interpretation: &gt;1 means profitable, &gt;2 is very good</li> <li>Example: 1.8 means gross profits are 1.8x gross losses</li> </ul>"},{"location":"performance_metrics/#5-risk-management-metrics","title":"5. Risk Management Metrics","text":""},{"location":"performance_metrics/#value-at-risk-var","title":"Value at Risk (VaR)","text":"<ul> <li>What it is: Maximum expected loss at a given confidence level</li> <li>Formula: Percentile of return distribution</li> <li>Interpretation: Lower (more negative) means higher risk</li> <li>Example: -2.5% means 95% of the time, you won't lose more than 2.5% in a period</li> </ul>"},{"location":"performance_metrics/#conditional-value-at-risk-cvar","title":"Conditional Value at Risk (CVaR)","text":"<ul> <li>What it is: Average loss when VaR threshold is exceeded</li> <li>Formula: Mean of returns below VaR threshold</li> <li>Interpretation: More conservative than VaR; considers tail risk</li> <li>Example: -3.2% means when you exceed VaR, you lose 3.2% on average</li> </ul>"},{"location":"performance_metrics/#6-distribution-metrics","title":"6. Distribution Metrics","text":""},{"location":"performance_metrics/#skewness","title":"Skewness","text":"<ul> <li>What it is: Measure of return distribution asymmetry</li> <li>Interpretation: </li> <li>Positive: More positive outliers (good surprises)</li> <li>Negative: More negative outliers (bad surprises)</li> <li>Zero: Symmetric distribution</li> <li>Example: -0.5 means slightly more negative surprises than positive</li> </ul>"},{"location":"performance_metrics/#kurtosis","title":"Kurtosis","text":"<ul> <li>What it is: Measure of \"fat tails\" in return distribution</li> <li>Interpretation: </li> <li>High: More extreme events than normal distribution</li> <li>Low: Fewer extreme events</li> <li>Normal distribution has kurtosis \u2248 0</li> <li>Example: 4.2 means more extreme events than a normal distribution</li> </ul>"},{"location":"performance_metrics/#advanced-usage","title":"Advanced Usage","text":""},{"location":"performance_metrics/#rolling-metrics","title":"Rolling Metrics","text":"<p>Calculate metrics over rolling windows to see how performance changes over time:</p> <pre><code>from utils.metrics import calculate_rolling_metrics\n\n# Calculate 60-day rolling metrics\nrolling_metrics = calculate_rolling_metrics(\n    returns=your_returns,\n    window=60,  # 60-day window\n    periods_per_year=252\n)\n\n# Plot rolling Sharpe ratio\nimport matplotlib.pyplot as plt\nplt.plot(rolling_metrics.index, rolling_metrics['rolling_sharpe'])\nplt.title('Rolling Sharpe Ratio (60-day window)')\nplt.show()\n</code></pre>"},{"location":"performance_metrics/#custom-risk-free-rates","title":"Custom Risk-Free Rates","text":"<p>Adjust the risk-free rate based on your market and time period:</p> <pre><code># For US markets (Treasury rates)\nmetrics = calculate_all_metrics(\n    returns=returns,\n    risk_free_rate=0.05,  # 5% annual rate\n    periods_per_year=252\n)\n\n# For different time frequencies\nmonthly_metrics = calculate_all_metrics(\n    returns=monthly_returns,\n    risk_free_rate=0.05,\n    periods_per_year=12  # Monthly data\n)\n</code></pre>"},{"location":"performance_metrics/#strategy-comparison","title":"Strategy Comparison","text":"<p>Compare multiple strategies side by side:</p> <pre><code>strategies = {\n    \"Conservative\": conservative_returns,\n    \"Balanced\": balanced_returns,\n    \"Aggressive\": aggressive_returns\n}\n\ncomparison_data = []\nfor name, returns in strategies.items():\n    metrics = calculate_all_metrics(returns)\n    comparison_data.append({\n        'Strategy': name,\n        'Sharpe': f\"{metrics['sharpe_ratio']:.2f}\",\n        'Max DD': f\"{metrics['max_drawdown']:.2%}\",\n        'Hit Rate': f\"{metrics['hit_rate']:.2%}\"\n    })\n\ncomparison_df = pd.DataFrame(comparison_data)\nprint(comparison_df)\n</code></pre>"},{"location":"performance_metrics/#best-practices","title":"Best Practices","text":""},{"location":"performance_metrics/#1-use-multiple-metrics","title":"1. Use Multiple Metrics","text":"<p>Don't rely on a single metric. Consider: - Return: Total and annualized returns - Risk: Volatility and maximum drawdown - Risk-Adjusted: Sharpe, Sortino, and Calmar ratios - Risk Management: VaR and CVaR - Trading: Hit rate and profit factor</p>"},{"location":"performance_metrics/#2-consider-time-periods","title":"2. Consider Time Periods","text":"<ul> <li>Short-term: Focus on volatility and drawdown</li> <li>Long-term: Emphasize annualized returns and risk-adjusted metrics</li> <li>Rolling metrics: Show how performance evolves over time</li> </ul>"},{"location":"performance_metrics/#3-benchmark-against-market","title":"3. Benchmark Against Market","text":"<p>Compare your strategy to: - Risk-free rate (Treasury bills) - Market index (S&amp;P 500, Russell 2000) - Peer strategies or funds</p>"},{"location":"performance_metrics/#4-understand-limitations","title":"4. Understand Limitations","text":"<ul> <li>Historical metrics don't guarantee future performance</li> <li>Out-of-sample testing is crucial for validation</li> <li>Market conditions change, affecting metric stability</li> </ul>"},{"location":"performance_metrics/#example-analysis","title":"Example Analysis","text":"<p>Here's a complete example analyzing a market making strategy:</p> <pre><code>from utils.metrics import calculate_all_metrics, print_metrics_summary\nimport numpy as np\n\n# Simulate strategy returns (replace with your actual data)\nnp.random.seed(42)\nreturns = np.random.normal(0.0008, 0.015, 1000)  # Daily returns\n\n# Calculate comprehensive metrics\nmetrics = calculate_all_metrics(\n    returns=returns,\n    risk_free_rate=0.03,  # 3% annual risk-free rate\n    periods_per_year=252   # Daily data\n)\n\n# Print summary\nprint_metrics_summary(metrics)\n\n# Key insights\nif metrics['sharpe_ratio'] &gt; 1.0:\n    print(\"\u2713 Good risk-adjusted returns\")\nelse:\n    print(\"\u26a0 Risk-adjusted returns could be improved\")\n\nif metrics['max_drawdown'] &gt; -0.20:\n    print(\"\u2713 Reasonable drawdown levels\")\nelse:\n    print(\"\u26a0 High drawdown risk\")\n\nif metrics['profit_factor'] &gt; 1.5:\n    print(\"\u2713 Strong profit generation\")\nelse:\n    print(\"\u26a0 Profit generation could be improved\")\n</code></pre>"},{"location":"performance_metrics/#integration-with-mmrl","title":"Integration with MMRL","text":"<p>These metrics integrate seamlessly with MMRL's other components:</p> <ul> <li>Environment Results: Use metrics to evaluate simulation outcomes</li> <li>Agent Comparison: Compare different market making strategies</li> <li>Hyperparameter Tuning: Optimize strategies based on metrics</li> <li>Risk Management: Set limits based on VaR and drawdown metrics</li> <li>Reporting: Generate professional performance reports</li> </ul>"},{"location":"performance_metrics/#next-steps","title":"Next Steps","text":"<ol> <li>Run the example: Execute <code>examples/performance_analysis.py</code></li> <li>Test your strategies: Apply metrics to your own backtest results</li> <li>Customize metrics: Modify or extend metrics for your specific needs</li> <li>Visualize results: Create custom charts and dashboards</li> <li>Automate analysis: Integrate metrics into your testing pipeline</li> </ol> <p>For more advanced usage, see the API documentation and explore the source code in <code>utils/metrics.py</code>. </p>"},{"location":"programmatic/","title":"Programmatic API","text":"<p>Use MMRL from Python code for scripting and integration.</p>"},{"location":"programmatic/#backtest","title":"Backtest","text":"<pre><code>from mmrl import run_backtest\ncfg = {\"run_tag\": \"scripted\", \"seed\": 7, \"steps\": 1000, \"output_dir\": \"results\",\n        \"agent\": {\"spread\": 0.1, \"inventory_sensitivity\": 0.05},\n        \"market\": {\"ou_enabled\": True, \"ou\": {\"mu\": 100, \"kappa\": 0.05, \"sigma\": 0.5, \"dt\": 1.0},\n                    \"vol_regime\": {\"enabled\": True, \"high_sigma_scale\": 3.0, \"switch_prob\": 0.02}},\n        \"execution\": {\"base_arrival_rate\": 1.0, \"alpha\": 1.5},\n        \"fees\": {\"fee_bps\": 1.0, \"slippage_bps\": 2.0, \"maker_bps\": -0.5, \"taker_bps\": 1.0}}\nrun_dir, metrics = run_backtest(cfg)\nprint(run_dir, metrics)\n</code></pre>"},{"location":"reporting/","title":"Reporting","text":""},{"location":"reporting/#analyze-returns","title":"Analyze returns","text":"<pre><code>mmrl analyze path/to/returns.csv --plot --output-file metrics.csv\n</code></pre>"},{"location":"reporting/#html-report","title":"HTML report","text":"<pre><code>mmrl report results/&lt;run_dir&gt; --out report.html\n</code></pre> <p>This saves a concise HTML with key metrics and source reference for sharing.</p>"},{"location":"workflows/","title":"Workflows","text":""},{"location":"workflows/#prototype","title":"Prototype","text":"<ol> <li><code>mmrl backtest</code></li> <li><code>mmrl report results/&lt;run&gt;</code></li> </ol>"},{"location":"workflows/#compare-agents","title":"Compare agents","text":"<ol> <li><code>mmrl evaluate</code></li> <li>Inspect MLflow UI or saved comparison plots</li> </ol>"},{"location":"workflows/#hyperparameter-search","title":"Hyperparameter search","text":"<ul> <li>Grid:</li> </ul> <pre><code>mmrl grid\n</code></pre> <ul> <li>Optuna:</li> </ul> <pre><code>python3 experiments/hyperopt.py\n</code></pre>"},{"location":"workflows/#data-backed-test","title":"Data-backed test","text":"<ol> <li>Fetch Parquet with CCXT</li> <li>Replay with <code>MarketReplay</code> and evaluate</li> </ol>"},{"location":"workflows/#api-orchestration","title":"API orchestration","text":"<ol> <li><code>docker compose up -d redis worker api mlflow</code></li> <li>Submit jobs via HTTP and monitor <code>/jobs</code></li> </ol>"}]}